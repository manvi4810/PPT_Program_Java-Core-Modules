Q1.What is Exception in Java?
A1. In Java, an exception is an event that occurs during the execution of a program and disrupts its normal flow. It represents an abnormal condition or error that arises while the program is running. When an exception occurs, it typically causes the program to terminate or behave in an unexpected manner.

Exceptions are used to handle errors, exceptional conditions, and unexpected situations in a structured manner. They help in separating the normal code flow from the error-handling logic, making the code more readable and maintainable.
In Java, exceptions are represented by classes that inherit from the base class Throwable. There are two main types of exceptions:

Checked Exceptions: These exceptions are checked at compile-time, meaning that the compiler enforces the programmer to handle or declare these exceptions. Examples include IOException, SQLException, and ClassNotFoundException. They usually represent recoverable conditions that the program can anticipate and handle gracefully.

Unchecked Exceptions: Also known as runtime exceptions, these exceptions are not checked at compile-time, so the programmer is not required to handle or declare them explicitly. They typically represent programming errors or conditions that are not recoverable. Examples include NullPointerException, ArrayIndexOutOfBoundsException, and ArithmeticException.

Java provides a mechanism called exception handling to deal with exceptions. It allows you to catch and handle exceptions using try-catch blocks, and optionally specify code that should be executed regardless of whether an exception occurs using finally blocks. By handling exceptions appropriately, you can gracefully recover from errors and ensure the stability of your program.

Q2.What is Exception Handling?
A2. Exception handling is a mechanism in programming languages, including Java, that allows for the graceful handling of exceptions or errors that may occur during the execution of a program. It provides a structured way to deal with exceptional conditions and prevent the program from terminating abruptly or behaving unpredictably.

Exception handling involves the following key elements:

Try block: The code that may potentially throw an exception is placed within a try block. It defines the scope where an exception is actively monitored.

Catch block: A catch block follows the try block and specifies the type of exception it can handle. If an exception of that type is thrown within the try block, the corresponding catch block is executed. It allows for the handling of the exception, recovery, and continuation of the program's execution.

Finally block: Optionally, a finally block can be added after the catch block(s). The code within the finally block is always executed, regardless of whether an exception occurred or was caught. It is typically used for releasing resources or performing cleanup operations.

try {
    // Code that may throw an exception
} catch (ExceptionType1 exception1) {
    // Handling logic for ExceptionType1
} catch (ExceptionType2 exception2) {
    // Handling logic for ExceptionType2
} finally {
    // Code that always executes, irrespective of exception occurrence
}
Q3.What is the difference between Checked and Unchecked Exceptions and Error?
A3. Checked Exceptions: Checked exceptions are exceptions that are checked at compile-time, meaning that the compiler enforces the programmer to handle or declare these exceptions. They are typically used for recoverable conditions that the program can anticipate and handle gracefully. Some characteristics of checked exceptions are:

They extend the Exception class or one of its subclasses (except for RuntimeException and its subclasses).
They are explicitly declared in the method signature using the throws keyword.
Examples of checked exceptions include IOException, SQLException, and ClassNotFoundException.
The main purpose of checked exceptions is to ensure that the programmer acknowledges and handles potential errors and exceptional conditions. If a checked exception is not caught or declared, a compilation error will occur.

Unchecked Exceptions: Unchecked exceptions, also known as runtime exceptions, are exceptions that are not checked at compile-time. The compiler does not enforce the programmer to handle or declare them explicitly. Unchecked exceptions usually indicate programming errors or conditions that are not recoverable. Some characteristics of unchecked exceptions are:

They extend the RuntimeException class or one of its subclasses.
They are not required to be declared in the method signature using the throws keyword.
Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, and ArithmeticException.
Unchecked exceptions are typically caused by programming mistakes such as accessing a null reference or performing an illegal operation on data. They can be prevented by writing robust code and performing appropriate checks. If an unchecked exception is not caught or handled, it will propagate up the call stack until it is caught or the program terminates.

Q4.What are the difference between throw and throws in Java?
A4. In Java, both throw and throws are used in exception handling, but they serve different purposes. Here are the differences between throw and throws:

throw: The throw keyword is used to explicitly throw an exception within a method or block of code. It is used when you want to manually trigger an exception based on a specific condition or situation. When throw is used, it requires an instance of an exception class or one of its subclasses to be thrown. The syntax for using throw is as follows:

throw exceptionInstance;
Here, exceptionInstance represents an instance of an exception that you want to throw. The exception will propagate up the call stack until it is caught by an appropriate catch block or, if uncaught, it may cause the program to terminate.

throws: The throws keyword is used in the method declaration to indicate that a method may potentially throw one or more types of exceptions. It specifies the exceptions that the method can throw to the caller. The purpose of throws is to inform the caller or the calling code about the exceptions that the method can potentially throw, so that the caller can handle them or propagate them further. The syntax for using throws is as follows:

returnType methodName(parameterList) throws exceptionType1, exceptionType2, ... {
    // method implementation
}
Here, exceptionType1, exceptionType2, etc., represent the types of exceptions that the method can throw. The caller of the method is responsible for handling these exceptions or declaring them using throws in its own method declaration.

To summarize, throw is used to manually throw an exception within a block of code, while throws is used in the method declaration to indicate the types of exceptions that a method can potentially throw to its caller.

Q5.What is multithreading in Java? mention its advantages
A5.Multithreading in Java refers to the concurrent execution of multiple threads within a single program. A thread is an independent unit of execution that represents a separate flow of control. By using multiple threads, a program can perform multiple tasks concurrently, thereby achieving better efficiency and responsiveness. Here are some advantages of multithreading in Java:

Concurrency: Multithreading allows for concurrent execution of tasks. It enables different parts of a program to execute simultaneously, making efficient use of system resources and improving overall performance.

Responsiveness: Multithreading enhances the responsiveness of a program. By executing time-consuming operations in separate threads, the main thread can remain responsive to user interactions and other tasks. For example, a user interface can remain interactive while background tasks are running concurrently.

Parallelism: Multithreading enables parallel execution of tasks on systems with multiple processors or cores. It allows for exploiting the parallel processing capabilities of modern hardware, leading to faster execution of computationally intensive tasks.

Modularity: Multithreading helps in creating modular and maintainable code. By dividing a complex task into smaller threads, each responsible for a specific subtask, the code becomes more manageable, easier to understand, and promotes code reuse.

Resource Sharing: Threads can share data and resources within the same process. This enables efficient communication and coordination between different parts of a program. However, it requires careful synchronization mechanisms to avoid data inconsistencies and conflicts.

Q6.Write a program to create and call a custom exception
A6. public class CustomExceptionExample{

          try{
               validateInput(5);
             }
          catch(CustomException ex)
           {
              System.out.println("Custom exception");
           }
}
 public void validateInput(int x) throws CustomException
{
 if (number < 10) {
            throw new MyCustomException("Input number is too small");
        } else {
            System.out.println("Input number is valid");
        }
}
public CustomException extends Exception
{
  super("message"):
}

Q7.How can you handle exceptions in Java? 
A7. Try block: The code that may potentially throw an exception is placed within a try block. It defines the scope where an exception is actively monitored.
Catch block: A catch block follows the try block and specifies the type of exception it can handle. If an exception of that type is thrown within the try block, the corresponding catch block is executed. It allows for the handling of the exception, recovery, and continuation of the program's execution. Multiple catch blocks can be chained to handle different types of exceptions.
Finally block: Optionally, a finally block can be added after the catch block(s). The code within the finally block is always executed, regardless of whether an exception occurred or was caught. It is typically used for releasing resources or performing cleanup operations.
try {
    // Code that may throw an exception
} catch (ExceptionType1 exception1) {
    // Handling logic for ExceptionType1
} catch (ExceptionType2 exception2) {
    // Handling logic for ExceptionType2
} finally {
    // Code that always executes, irrespective of exception occurrence
}
Q8.What is Thread in Java?
A8. In Java, a thread is an independent unit of execution that represents a separate flow of control within a program. A thread allows concurrent execution of tasks and enables multiple operations to be performed simultaneously. Threads are a fundamental part of multithreading, allowing programs to achieve concurrency and better utilize system resources.
     In Java, a thread is an independent unit of execution that represents a separate flow of control within a program. A thread allows concurrent execution of tasks and enables multiple operations to be performed simultaneously. Threads are a fundamental part of multithreading, allowing programs to achieve concurrency and better utilize system resources.

Here are some key points about threads in Java:

Thread class: Java provides the Thread class, which serves as the foundation for creating and managing threads. You can create a thread by extending the Thread class and overriding its run() method, which contains the code that will be executed in the thread.

Runnable interface: Alternatively, you can implement the Runnable interface and pass it as a parameter to the Thread class constructor. The run() method's implementation is provided within the Runnable object. This approach allows for better flexibility as Java supports single inheritance but multiple interface implementation.

Lifecycle: Threads in Java have a lifecycle consisting of various states, including:

New: The thread is created but not yet started.
Runnable: The thread is ready for execution and waiting for a processor.
Running: The thread is currently executing.
Blocked/Waiting: The thread is temporarily inactive, waiting for a resource or another thread.
Terminated: The thread has completed its execution or has been explicitly stopped.
Concurrency and synchronization: When multiple threads access shared resources or variables concurrently, it can lead to data inconsistency and conflicts. Proper synchronization techniques, such as using locks or synchronized blocks, are necessary to ensure thread safety and prevent race conditions.

Thread priorities: Each thread in Java has a priority associated with it, ranging from 1 (lowest) to 10 (highest). The thread scheduler uses these priorities to determine the order of thread execution. However, thread priorities should be used with caution, as they are not guaranteed to be honored by all JVM implementations.

Thread synchronization: Threads can be synchronized using various mechanisms such as locks, semaphores, and monitors. Synchronization ensures that only one thread can access a critical section of code at a time, preventing concurrent modifications and maintaining data integrity.

Thread pooling: Creating and managing a large number of threads can have performance overhead. Thread pooling is a technique that involves reusing a fixed number of threads from a pool to execute multiple tasks. It improves efficiency by reducing the overhead of thread creation and destruction.

Q9. What are the two ways of implementing thread in Java?
A9.Extending the Thread class: One way to implement a thread is by extending the Thread class. This approach involves creating a new class that extends Thread and overriding its run() method. The run() method contains the code that will be executed when the thread starts. Here's an example:

class MyThread extends Thread {
    public void run() {
        // Code to be executed in the thread
    }
}

// Create and start the thread
MyThread myThread = new MyThread();
myThread.start();
In this approach, the MyThread class is a subclass of Thread and provides its own implementation of the run() method. The thread is created by instantiating the MyThread class and calling its start() method. The start() method internally calls the run() method, which executes the code within the thread.

Implementing the Runnable interface: Another way to implement a thread is by implementing the Runnable interface. This approach involves creating a class that implements the Runnable interface and providing the implementation for the run() method. The Runnable object is then passed as a parameter to the Thread constructor. Here's an example:

class MyRunnable implements Runnable {
    public void run() {
        // Code to be executed in the thread
    }
}

// Create a Runnable object
MyRunnable myRunnable = new MyRunnable();

// Create and start the thread
Thread myThread = new Thread(myRunnable);
myThread.start();
In this approach, the MyRunnable class implements the Runnable interface and provides the implementation for the run() method. The Runnable object (myRunnable) is passed as a parameter to the Thread constructor when creating a new thread. The start() method is then called on the Thread object to start the execution of the thread.
Both approaches allow for implementing concurrent behavior, but using the Runnable interface is generally considered more flexible and recommended. It allows for better separation of concerns, as it separates the task logic (Runnable) from the thread management logic (Thread). It also avoids the limitation of single inheritance in Java, as a class can implement multiple interfaces.

Q10.What do you mean by garbage collection?
A10. Garbage collection is a process in Java (and some other programming languages) that automatically manages the memory used by objects in a program. It involves identifying and freeing memory that is no longer needed, allowing the program to reclaim resources and avoid memory leaks.
In Java, objects are dynamically allocated in the heap memory using the new keyword. Once an object is created, it consumes memory for its fields, methods, and other related data. However, as the program executes, objects may become unreachable or no longer needed, either due to the end of their scope or explicit de-referencing.






